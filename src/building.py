from colors import object_colors


class Building:
    def __init__(self, simulation):
        self.simulation = simulation
        self.text_building = self.generate_building()
        self.object_locations = {
            "door": [],
            "exit": [],
            "stair": [],
            "glass": [],
            "obstacle": [],
            "wall": [],
            "empty": [],
            "fire": [],
        }
        self.color_building = []
        self.convert_text_to_colors()
        self.grid = []
        self.convert_text_to_pathfinding_grid()

    @staticmethod
    def generate_building():
        # w is wall
        # h is half-wall
        # o is obstacle
        # m is mini-object
        # n is normal-object
        # l is large-object
        # d is door
        # s is stair
        # g is glass
        # ' ' is empty space
        # e is for exit
        # p evacuation plan marker
        # 1 is room indicator
        # 2 is hall indicator

        building = [
            [
                ['w','w','g','g','g','g','g','w','w','w','w','w','g','w','w','w','g','w','w','w','g','g','g','g','g','g','g','w','w','w','w'],
                ['w','l','l','l','l','l',' ',' ','h',' ','w','m','n','m','w',' ','m',' ','w','p',' ',' ',' ',' ',' ',' ',' ','p','d',' ','e'],
                ['g','l',' ',' ',' ',' ',' ',' ','h',' ','w',' ',' ',' ','w',' ','n','n','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'],
                ['g','l',' ','n','n','n',' ',' ','h',' ','w',' ',' ',' ','w',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w','s','w'],
                ['g','l',' ','n','n','n',' ',' ','h',' ','w',' ',' ','p','w','p',' ','m','w',' ',' ',' ','w','w','w','w','w','w','w','w','w'],
                ['g',' ',' ',' ',' ',' ',' ',' ','h',' ','w','w','w','d','w','d','w','w','w',' ',' ',' ','h','l','n','l','w',' ',' ',' ','w'],
                ['w',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ','h','l','n','l','w',' ',' ',' ','g'],
                ['w','w','w',' ',' ',' ',' ',' ','w',' ','p',' ',' ',' ','p',' ',' ',' ','w',' ',' ',' ','h','l','n','l','w',' ',' ',' ','g'],
                ['w',' ','w',' ',' ',' ',' ',' ','w','w','d','w','w','w','d','w','w','w','w',' ',' ',' ',' ',' ',' ',' ','h',' ',' ',' ','g'],
                ['w',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','p',' ',' ',' ',' ',' ','m','h',' ',' ',' ','g'],
                ['e',' ','d','p',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','m','h',' ',' ','p','w'],
                ['w',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','m','h','h','h','d','w'],
                ['w',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
                ['w','w','w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','p',' ',' ',' ',' ','p',' ','h','l','n','l','h','l','n','l','w'],
                ['w','w','w','w','w','d','w','d','w','w','w','w','w','w','w',' ','w','w','w','w',' ',' ','h','l','n','l','h','l','n','l','w'],
                ['w',' ',' ',' ',' ','p','w','p',' ',' ',' ',' ','w',' ','w',' ','w',' ',' ','w',' ',' ','h','l','n','l','h','l','n','l','w'],
                ['g',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ','w',' ','w',' ','w',' ',' ','w',' ',' ','w','w','w','w','w','w','w','w','w'],
                ['g',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ','w',' ','w',' ','w',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ','w','s','w'],
                ['g',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ','w',' ','w',' ','w',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'],
                ['w',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ','w','p','d',' ','d','p',' ','w','p',' ',' ',' ',' ',' ',' ','p','d',' ','e'],
                ['w','w','g','g','g','w','w','w','g','g','g','w','w','w','w','e','w','w','w','w','w','g','g','g','g','g','g','w','w','w','w'],
            ],
            [
                ['w','w','g','g','g','g','g','g','w','w','w','g','g','w','w','w','g','g','w','w','w','g','g','g','g','g','g','w','w','w','w'],
                ['w',' ',' ',' ',' ',' ','m','n','m','w','m','n','m',' ','w','l','l','l',' ','w','p',' ',' ',' ',' ',' ',' ','p','d',' ','w'],
                ['g','m',' ',' ','w',' ',' ',' ',' ','w',' ',' ',' ',' ','w','l',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'],
                ['g','l',' ',' ','w','p','m','n','m','w','m','n','m','p','w','l',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ','w','s','w'],
                ['g','l',' ',' ','w','d','w','w','w','w','w','w','w','d','w',' ',' ',' ','l','w',' ',' ','w','d','w','w','w','w','w','w','w'],
                ['w','l',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ','l','w',' ',' ','d','p',' ',' ',' ',' ',' ',' ','w'],
                ['w','l','l','p','w',' ',' ',' ',' ','p',' ',' ',' ',' ','w','p','l','l','l','w',' ',' ','w',' ','m',' ','m',' ','m',' ','g'],
                ['w','w','w','d','w',' ','w','w','w','w','w','w','w',' ','w','d','w','w','w','w',' ',' ','w',' ','l','l','l','l','l',' ','g'],
                ['w','m','w',' ',' ',' ','w',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','l','l','l','l','l',' ','g'],
                ['g',' ','w',' ',' ',' ','w',' ','m','n','m',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','m',' ','m',' ','m',' ','g'],
                ['g','p','d',' ',' ',' ','d','p',' ','n',' ','p','d','p',' ',' ',' ',' ',' ',' ','p',' ','w',' ',' ',' ',' ',' ',' ',' ','g'],
                ['w',' ','w',' ',' ',' ','w',' ','m','n','m',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','m',' ','m',' ','m',' ','g'],
                ['w','m','w',' ',' ',' ','w',' ',' ',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','l','l','l','l','l',' ','g'],
                ['w','w','w','d','w',' ','w','w','w','w','w','w','w',' ','w','d','w','w','w','w',' ',' ','w',' ','l','l','l','l','l',' ','g'],
                ['w','m',' ','p','w',' ',' ',' ',' ','p',' ',' ',' ',' ','w','p','l','l','l','w',' ',' ','w',' ','m',' ','m',' ','m',' ','g'],
                ['w','n',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ',' ',' ','l','w',' ',' ','d','p',' ',' ',' ',' ',' ',' ','w'],
                ['g','m',' ',' ','w','d','w','w','w','w','w','w','w','d','w',' ',' ',' ','l','w',' ',' ','w','d','w','w','w','w','w','w','w'],
                ['g',' ',' ',' ','w','p','m','n','m','w','m','n','m','p','w','l',' ',' ','l','w',' ',' ',' ',' ',' ',' ',' ',' ','w','s','w'],
                ['g',' ',' ',' ','w',' ',' ',' ',' ','w',' ',' ',' ',' ','w','l',' ',' ',' ','w',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'],
                ['w','m','n','m','w',' ','m','n','m','w','m','n','m',' ','w','l','l','l',' ','w','p',' ',' ',' ',' ',' ',' ','p','d',' ','w'],
                ['w','w','g','w','w','w','g','g','w','w','w','g','g','w','w','w','w','g','w','w','w','g','g','g','g','g','g','w','w','w','w'],
            ],
            [
                ['w','w','w','w','w','g','w','w','w','g','w','w','w','w','w','w','w','w','w','g','w','w','w','g','w','w','w','w','w','w','w'],
                ['w','l','l','w',' ','n',' ','w',' ','n',' ','w',' ','m','w','m',' ','w',' ','n',' ','w',' ','n',' ','w',' ','p','d',' ','w'],
                ['g','l',' ','w',' ','n','m','w',' ','n','m','w',' ','n','w','n',' ','w','m','n',' ','w','m','n',' ','w',' ',' ','w',' ','w'],
                ['g','l',' ','w','p',' ',' ','w','p',' ',' ','w','p',' ','w',' ','p','w',' ',' ','p','w',' ',' ','p','w',' ',' ','w','s','w'],
                ['g','l',' ','w','d','w','w','w','d','w','w','w','d','w','w','w','d','w','w','w','d','w','w','w','d','w',' ',' ','w','w','w'],
                ['w','l','p','d',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
                ['w','w','w','w',' ','p',' ',' ',' ',' ',' ',' ',' ',' ','p',' ',' ','p',' ',' ',' ',' ',' ',' ',' ',' ','p',' ',' ',' ','w'],
                ['w','m','p','d',' ',' ','w','w','w','d','w','d','w','w','w',' ',' ','w','w','w','d','w','d','w','w','w',' ','w','w','d','w'],
                ['g','n',' ','w',' ',' ','w',' ',' ','p','w','p',' ',' ','w',' ',' ','w',' ',' ','p','w','p',' ',' ','w',' ','w',' ','p','w'],
                ['g','m',' ','w',' ',' ','w',' ',' ',' ','w',' ',' ',' ','w',' ',' ','w',' ',' ',' ','w',' ',' ',' ','w',' ','w',' ','m','g'],
                ['g',' ',' ','w',' ',' ','d','p',' ',' ','w',' ',' ','p','d',' ',' ','d','p',' ',' ','w',' ',' ','p','d',' ','d','p','n','g'],
                ['g','m',' ','w',' ',' ','w',' ',' ',' ','w',' ',' ',' ','w',' ',' ','w',' ',' ',' ','w',' ',' ',' ','w',' ','w',' ','m','g'],
                ['g','n',' ','w',' ',' ','w',' ',' ','p','w','p',' ',' ','w',' ',' ','w',' ',' ','p','w','p',' ',' ','w',' ','w',' ','p','w'],
                ['w','m','p','d',' ',' ','w','w','w','d','w','d','w','w','w',' ',' ','w','w','w','d','w','d','w','w','w',' ','w','w','d','w'],
                ['w','w','w','w',' ','p',' ',' ',' ',' ',' ',' ',' ',' ','p',' ',' ','p',' ',' ',' ',' ',' ',' ',' ',' ','p',' ',' ',' ','w'],
                ['w','l','p','d',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
                ['g','l',' ','w','d','w','w','w','d','w','w','w','d','w','w','w','d','w','w','w','d','w','w','w','d','w',' ',' ','w','w','w'],
                ['g','l',' ','w','p',' ',' ','w','p',' ',' ','w','p',' ','w',' ','p','w',' ',' ','p','w',' ',' ','p','w',' ',' ','w','s','w'],
                ['g','l',' ','w',' ','n','m','w',' ','n','m','w',' ','n','w','n',' ','w','m','n',' ','w','m','n',' ','w',' ',' ','w',' ','w'],
                ['w','l','l','w',' ','n',' ','w',' ','n',' ','w',' ','m','w','m',' ','w',' ','n',' ','w',' ','n',' ','w',' ','p','d',' ','w'],
                ['w','w','w','w','w','g','w','w','w','g','w','w','w','w','w','w','w','w','w','g','w','w','w','g','w','w','w','w','w','w','w'],
            ],
            # [
            #     ['w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','d',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w','s','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w','w','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w','w','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w','s','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','w',' ','w'],
            #     ['w',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',',' ',' ',',' ',' ',',' 'd',' ','w'],
            #     ['w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','e','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w'],
            # ],
        ]
        return building

    def convert_text_to_colors(self):
        self.object_locations = {
            "door": [],
            "exit": [],
            "stair": [],
            "glass": [],
            "obstacle": [],
            "wall": [],
            "empty": [],
            "fire": [],
            "broken_glass": []
        }
        self.color_building = self.text_building.copy()
        floors = len(self.color_building)
        for floor in range(floors):
            for row in self.color_building[floor]:
                for col in range(len(row)):
                    if row[col] == 'w' or row[col] == 'h':
                        self.object_locations["wall"].append((floor, row, col))
                        row[col] = object_colors["Black"]
                    elif row[col] == 'e':
                        self.object_locations["exit"].append((floor, row, col))
                        row[col] = object_colors["Dark Brown"]
                    elif row[col] == 'm' or row[col] == 'n' or row[col] == 'l':
                        self.object_locations["obstacle"].append((floor, row, col))
                        row[col] = object_colors["Grey"]
                    elif row[col] == 's':
                        self.object_locations["stair"].append((floor, row, col))
                        row[col] = object_colors["Stair Blue"]
                    elif row[col] == 'g':
                        self.object_locations["glass"].append((floor, row, col))
                        row[col] = object_colors["Light Brown"]
                    elif row[col] == 'd':
                        self.object_locations["door"].append((floor, row, col))
                        row[col] = object_colors["Brown"]
                    elif row[col] == ' ':
                        self.object_locations["empty"].append((floor, row, col))
                        row[col] = object_colors["White"]
                    elif row[col] == 'f':
                        self.object_locations["fire"].append((floor, row, col))
                        row[col] = object_colors["Red"]
                    elif row[col] == 'b':
                        self.object_locations["broken_glass"].append((floor, row, col))
                        row[col] = object_colors["Teal"]

    def convert_text_to_pathfinding_grid(self):
        # 0 is impassable
        # 1 is easily passable
        # 2 is passable
        # 3 is difficultly passable
        self.grid = self.text_building.copy()
        floors = len(self.grid)
        for floor in range(floors):
            for row in self.grid[floor]:
                for col in range(len(row)):
                    person = self.simulation.__is_person((floor, row, col))
                    if person:
                        row[col] = -1
                    elif row[col] == 'w' or row[col] == 'g' or row[col] == 'l':
                        row[col] = 0
                    elif row[col] == ' ' or row[col] == 'd' or row[col] == 'e' or row[col] == 's':
                        row[col] = 1
                    elif row[col] == 'h' or row[col] == 'm':
                        row[col] = 2
                    elif row[col] == 'n' or row[col] == 'f':
                        row[col] = 3

    def print_building(self):
        self.convert_text_to_colors()
        self.convert_text_to_pathfinding_grid()
        for floor in range(len(self.color_building)):
            for row in range(self.color_building[floor]):
                for col in range(self.color_building[floor][row]):
                    person = self.simulation.__is_person((floor, row, col))
                    if person:
                        print(person.color)
                    else:
                        print(self.color_building[floor][row][col])
